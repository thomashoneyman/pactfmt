(module coin GOVERNANCE (defcap GOVERNANCE () (enforce false "Enforce non-upgradeability")) (defcap GAS () "Magic capability to protect gas buy and redeem" true) (defcap COINBASE () "Magic capability to protect miner reward" true) (defcap GENESIS () "Magic capability constraining genesis transactions" true) (defcap REMEDIATE () "Magic capability for remediation transactions" true) (defcap DEBIT (sender:string) "Capability for managing debiting operations" (enforce (!= sender "") "valid sender")) (defcap CREDIT (receiver:string) "Capability for managing crediting operations" (enforce (!= receiver "") "valid receiver")) (defcap ROTATE (account:string) @doc "Autonomously managed capability for guard rotation" @managed true) (defcap TRANSFER:bool ( sender:string receiver:string amount:decimal) @managed amount TRANSFER-mgr (enforce (!= sender receiver) "same sender and receiver") (enforce (> amount 0.0) "Positive amount") (compose-capability (DEBIT sender)) (compose-capability (CREDIT receiver))) (defcap TRANSFER_XCHAIN:bool ( sender:string receiver:string amount:decimal target-chain:string) @managed amount TRANSFER-mgr (enforce (> amount 0.0) "Cross-chain transfers require a positive amount") (compose-capability (DEBIT sender))) (defcap TRANSFER_XCHAIN_RECD:bool ( sender:string receiver:string amount:decimal source-chain:string) @event true) (defcap RELEASE_ALLOCATION ( account:string amount:decimal) @doc "Event for allocation release, can be used for sig scoping." @event true) (defun TRANSFER-mgr:decimal (managed:decimal requested:decimal) 0.0))